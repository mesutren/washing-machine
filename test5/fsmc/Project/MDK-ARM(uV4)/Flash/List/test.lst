L 1 "test.c"
N///*
N//*********************************************************************************************************
N//*
N//*	模块名称 : TCPnet网络协议栈测试
N//*	文件名称 : app_tcpnet_lib.c
N//*	版    本 : V1.0
N//*	说    明 : 测试的功能说明
N//*              1. 强烈推荐将网线接到路由器或者交换机上面测试，因为已经使能了DHCP，可以自动获取IP地址。
N//*              2. 客户端的例子相比服务器的例子稍麻烦些，因为客户端的例子需要用户知道电脑端IP和端口号。
N//*                 并根据实际情况设置IP和端口号的宏定义，这个配置在文件app_tcpnet_lib.c开头，测试的时
N//*                 候板子要连接这个IP和端口（下面是默认配置，一定要根据实际情况重新配置，如果不会配置，
N//*                 看本例程对应的教程即可）：
N//*                 #define IP1            192
N//*                 #define IP2            168
N//*                 #define IP3            1
N//*                 #define IP4            2                 
N//*                 #define PORT_NUM       1001
N//*              3. 创建了一个TCP Client，而且使能了局域网域名NetBIOS，用户只需在电脑端ping armfly
N//*                 就可以获得板子的IP地址，本地端口被设置为1024。
N//*              4. 用户可以在电脑端用网络调试软件创建TCP Server连接此客户端。
N//*              5. 按键K1按下，发送8字节的数据给TCP Server。
N//*              6. 按键K2按下，发送1024字节的数据给TCP Server。
N//*              7. 按键K3按下，发送5MB字节的数据给TCP Server。
N//*
N//*	修改记录 :
N//*		版本号   日期         作者        说明
N//*		V1.0    2017-04-17   Eric2013     首发
N//*
N//*	Copyright (C), 2015-2020, 安富莱电子 www.armfly.com
N//*
N//*********************************************************************************************************
N//*/		
N//#include "bsp.h"		
N//#include <RTL.h>
N//#include <stdio.h>
N//#include <Net_Config.h>
N
N
N
N///*
N//*********************************************************************************************************
N//*	                                  用于本文件的调试
N//*********************************************************************************************************
N//*/
N//#if 1
N//	#define printf_debug printf
N//#else
N//	#define printf_debug(...)
N//#endif
N
N
N///*
N//*********************************************************************************************************
N//*	                          宏定义，远程服务器的IP和端口
N//*********************************************************************************************************
N//*/
N///* 要访问的远程服务器IP和端口配置，也就是电脑端调试助手设置的IP和端口号 */
N//#define IP1            192
N//#define IP2            168
N//#define IP3            23
N//#define IP4            10
N
N//#define PORT_NUM         1001
N
N///* 这个是本地端口 */
N//#define LocalPort_NUM    1024
N
N///*
N//*********************************************************************************************************
N//*	                                     变量
N//*********************************************************************************************************
N//*/
N//uint8_t socket_tcp;
N//uint8_t Rem_IP[4] = {IP1,IP2,IP3,IP4};
N
N
N///*
N//*********************************************************************************************************
N//*	函 数 名: tcp_callback
N//*	功能说明: TCP Socket的回调函数
N//*	形    参: soc  TCP Socket类型
N//*             evt  事件类型
N//*             ptr  事件类型是TCP_EVT_DATA，ptr指向的缓冲区记录着接收到的TCP数据，其余事件记录IP地址
N//*             par  事件类型是TCP_EVT_DATA，记录接收到的数据个数，其余事件记录端口号
N//*	返 回 值: 
N//*********************************************************************************************************
N//*/
N//U16 tcp_callback (U8 soc, U8 evt, U8 *ptr, U16 par)
N//{
N//	char buf[50];
N//	uint16_t i;
N//	
N//	/* 确保是socket_tcp的回调 */
N//	if (soc != socket_tcp) 
N//	{
N//		return (0);
N//	}
N
N//	switch (evt) 
N//	{
N//		/*
N//			远程客户端连接消息
N//		    1、数组ptr存储远程设备的IP地址，par中存储端口号。
N//		    2、返回数值1允许连接，返回数值0禁止连接。
N//		*/
N//		case TCP_EVT_CONREQ:
N//			sprintf(buf, "远程客户端请求连接IP: %d.%d.%d.%d", ptr[0], ptr[1], ptr[2], ptr[3]);
N//			printf_debug("IP:%s  port:%d\r\n", buf, par);
N//			return (1);
N//		
N//		/* 连接终止 */
N//		case TCP_EVT_ABORT:
N//			break;
N//		
N//		/* Socket远程连接已经建立 */
N//		case TCP_EVT_CONNECT:
N//			printf_debug("Socket is connected to remote peer\r\n");
N//			break;
N//		
N//		/* 连接断开 */
N//		case TCP_EVT_CLOSE:
N//		   	printf_debug("Connection has been closed\r\n");
N//			break;
N//		
N//		/* 发送的数据收到远程设备应答 */
N//		case TCP_EVT_ACK:
N//			break;
N//		
N//		/* 接收到TCP数据帧，ptr指向数据地址，par记录数据长度，单位字节 */
N//		case TCP_EVT_DATA:
N//			printf_debug("Data length = %d\r\n", par);
N//			for(i = 0; i < par; i++)
N//			{
N//				printf_debug("ptr[%d] = %d\r\n", i, ptr[i]);
N//			}
N//			break;
N//	}
N//	
N//	return (0);
N//}
N
N///*
N//*********************************************************************************************************
N//*	函 数 名: TCP_StatusCheck
N//*	功能说明: 检测TCP的连接状态，主要用于网线插拔的判断
N//*	形    参: 无
N//*	返 回 值: __TRUE  连接
N//*             __FALSE 断开
N//*********************************************************************************************************
N//*/
N//uint8_t TCP_StatusCheck(void) 
N//{
N//	switch (tcp_get_state(socket_tcp)) 
N//	{
N//		case TCP_STATE_FREE:
N//		case TCP_STATE_CLOSED:
N//			{
N//				/* 这里默认不开启调试，否则未跟电脑端服务器连接前会一直发 */
N//				#if 1
N//				  uint8_t res;
N//				  res = tcp_connect (socket_tcp, Rem_IP, PORT_NUM, LocalPort_NUM);
N//				  printf_debug("tcp connect res = %d\r\n", res);
N//                #else 
N//				  tcp_connect (socket_tcp, Rem_IP, PORT_NUM, LocalPort_NUM);
N//				#endif
N//			}
N//			break;
N//		
N//		case TCP_STATE_LISTEN:
N//			break;
N//		
N//		case TCP_STATE_CONNECT:
N//			return (__TRUE);
N//			
N//		default:  
N//			break;
N//	}
N//	
N//	return (__FALSE);
N//}
N
N///*
N//*********************************************************************************************************
N//*	函 数 名: tcpnet_poll
N//*	功能说明: 使用TCPnet必须要一直调用的函数
N//*	形    参: 无
N//*	返 回 值: 无
N//*********************************************************************************************************
N//*/
N//void tcpnet_poll(void)
N//{
N//	if(bsp_CheckTimer(0))
N//	{
N//		/* 此函数坚决不可以放在中断里面跑 */
N//		timer_tick ();
N//	}
N//	
N//	main_TcpNet ();
N//}
N
N///*
N//*********************************************************************************************************
N//*	函 数 名: TCPnetTest
N//*	功能说明: TCPnet应用
N//*	形    参: 无
N//*	返 回 值: 无
N//*********************************************************************************************************
N//*/
N//void TCPnetTest(void)
N//{  
N
N//	uint8_t res;
N
N//	
N//	
N//	/* 初始化网络协议栈 */
N//	init_TcpNet ();
N
N//	/* 
N//	   创建TCP Socket并连接，客户端连接服务器后，10秒内无数据通信将断开连接。
N//	   但是由于这里使能了TCP_TYPE_KEEP_ALIVE，会一直保持连接，不受10秒的时间限制。
N//	*/
N//    socket_tcp = tcp_get_socket (TCP_TYPE_CLIENT | TCP_TYPE_KEEP_ALIVE, 0, 10, tcp_callback);
N//	if(socket_tcp != 0)
N//	{
N//		res = tcp_connect (socket_tcp, Rem_IP, PORT_NUM, LocalPort_NUM);
N//		printf("TCP Socket创建成功res = %d\r\n", res);
N//	}
N
N//	/* 创建一个周期是100ms的软定时器 */
N//    bsp_StartAutoTimer(0, 100);
N//	}
N//void tcpnet(void)
N//	{
N////		int32_t iCount = 8;
N
N//		uint16_t length;
N//		uint8_t *sendbuf;
N//		/* TCP?? */
N//		tcpnet_poll();
N//		
N//		/* ????????? */
N
N
N//						tcpnet_poll();
N//						if (tcp_check_send (socket_tcp) == __TRUE) 
N//						{
N//							length = 16;
N//							
N//							sendbuf = tcp_get_buf(length);
N//							sendbuf[0] = g_tAD7606.tcpadc[0];
N//							sendbuf[1] = g_tAD7606.tcpadc[1];
N//							sendbuf[2] = g_tAD7606.tcpadc[2];
N//							sendbuf[3] = g_tAD7606.tcpadc[3];
N//							sendbuf[4] = g_tAD7606.tcpadc[4];
N//							sendbuf[5] = g_tAD7606.tcpadc[5];
N//							sendbuf[6] = g_tAD7606.tcpadc[6];
N//							sendbuf[7] = g_tAD7606.tcpadc[7];
N//							sendbuf[8] = g_tAD7606.tcpadc[8];
N//							sendbuf[9] = g_tAD7606.tcpadc[9];
N//							sendbuf[10] = g_tAD7606.tcpadc[10];
N//							sendbuf[11] = g_tAD7606.tcpadc[11];
N//							sendbuf[12] = g_tAD7606.tcpadc[12];
N//							sendbuf[13] = g_tAD7606.tcpadc[13];
N//							sendbuf[14] = g_tAD7606.tcpadc[14];
N//							sendbuf[15] = g_tAD7606.tcpadc[15];
N//							
N//							/* ????????????? */
N//							tcp_send (socket_tcp, sendbuf , length);
N//					}
N//						
N
N//			}
N
N
N///***************************** 安富莱电子 www.armfly.com (END OF FILE) *********************************/
