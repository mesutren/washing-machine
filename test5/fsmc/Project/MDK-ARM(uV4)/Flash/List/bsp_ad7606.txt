; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_ad7606.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_ad7606.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RL-ARM\Driver -I..\..\RL-ARM\Config -I..\..\RL-ARM\RL-RTX\inc -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\bsp_ad7606.crf ..\..\User\bsp_stm32f4xx\src\bsp_ad7606.c]
                          THUMB

                          AREA ||i.AD7606_CtrlLinesConfig||, CODE, READONLY, ALIGN=2

                  AD7606_CtrlLinesConfig PROC
;;;121    */
;;;122    static void AD7606_CtrlLinesConfig(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;123    {
;;;124    	GPIO_InitTypeDef GPIO_InitStructure;
;;;125    
;;;126    	/* 使能FSMC时钟 */
;;;127    	RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHB3PeriphClockCmd
;;;128    
;;;129    	/* 使能 GPIO时钟 */
;;;130    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOG, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2058              MOVS     r0,#0x58
00000e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;131    
;;;132    	/* 设置 PD.00(D2), PD.01(D3), PD.04(NOE), PD.05(NWE), PD.08(D13), PD.09(D14),
;;;133    	 PD.10(D15), PD.14(D0), PD.15(D1) 为复用推挽输出 */
;;;134    
;;;135    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
000012  220c              MOVS     r2,#0xc
000014  2100              MOVS     r1,#0
000016  4852              LDR      r0,|L1.352|
000018  f7fffffe          BL       GPIO_PinAFConfig
;;;136    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
00001c  220c              MOVS     r2,#0xc
00001e  2101              MOVS     r1,#1
000020  484f              LDR      r0,|L1.352|
000022  f7fffffe          BL       GPIO_PinAFConfig
;;;137    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
000026  220c              MOVS     r2,#0xc
000028  2104              MOVS     r1,#4
00002a  484d              LDR      r0,|L1.352|
00002c  f7fffffe          BL       GPIO_PinAFConfig
;;;138    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
000030  220c              MOVS     r2,#0xc
000032  2105              MOVS     r1,#5
000034  484a              LDR      r0,|L1.352|
000036  f7fffffe          BL       GPIO_PinAFConfig
;;;139    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
00003a  220c              MOVS     r2,#0xc
00003c  2108              MOVS     r1,#8
00003e  4848              LDR      r0,|L1.352|
000040  f7fffffe          BL       GPIO_PinAFConfig
;;;140    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
000044  220c              MOVS     r2,#0xc
000046  2109              MOVS     r1,#9
000048  4845              LDR      r0,|L1.352|
00004a  f7fffffe          BL       GPIO_PinAFConfig
;;;141    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
00004e  220c              MOVS     r2,#0xc
000050  210a              MOVS     r1,#0xa
000052  4843              LDR      r0,|L1.352|
000054  f7fffffe          BL       GPIO_PinAFConfig
;;;142    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
000058  220c              MOVS     r2,#0xc
00005a  210e              MOVS     r1,#0xe
00005c  4840              LDR      r0,|L1.352|
00005e  f7fffffe          BL       GPIO_PinAFConfig
;;;143    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
000062  220c              MOVS     r2,#0xc
000064  210f              MOVS     r1,#0xf
000066  483e              LDR      r0,|L1.352|
000068  f7fffffe          BL       GPIO_PinAFConfig
;;;144    
;;;145    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5 |
00006c  f24c7033          MOV      r0,#0xc733
000070  9000              STR      r0,[sp,#0]
;;;146    	                            GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
;;;147    	                            GPIO_Pin_15;
;;;148    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000072  2002              MOVS     r0,#2
000074  f88d0004          STRB     r0,[sp,#4]
;;;149    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000078  2003              MOVS     r0,#3
00007a  f88d0005          STRB     r0,[sp,#5]
;;;150    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00007e  2000              MOVS     r0,#0
000080  f88d0006          STRB     r0,[sp,#6]
;;;151    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000084  f88d0007          STRB     r0,[sp,#7]
;;;152    	GPIO_Init(GPIOD, &GPIO_InitStructure);
000088  4669              MOV      r1,sp
00008a  4835              LDR      r0,|L1.352|
00008c  f7fffffe          BL       GPIO_Init
;;;153    
;;;154    	/*
;;;155    		PE4/FSMC_A20		--- 和主片选一起译码
;;;156    		PE5/FSMC_A21		--- 和主片选一起译码
;;;157    
;;;158    		PE.07(D4), PE.08(D5), PE.09(D6), PE.10(D7), PE.11(D8), PE.12(D9), PE.13(D10),
;;;159    	 	PE.14(D11), PE.15(D12)
;;;160    	*/
;;;161    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource4 , GPIO_AF_FSMC);
000090  220c              MOVS     r2,#0xc
000092  2104              MOVS     r1,#4
000094  4833              LDR      r0,|L1.356|
000096  f7fffffe          BL       GPIO_PinAFConfig
;;;162    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource5 , GPIO_AF_FSMC);
00009a  220c              MOVS     r2,#0xc
00009c  2105              MOVS     r1,#5
00009e  4831              LDR      r0,|L1.356|
0000a0  f7fffffe          BL       GPIO_PinAFConfig
;;;163    
;;;164    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
0000a4  220c              MOVS     r2,#0xc
0000a6  2107              MOVS     r1,#7
0000a8  482e              LDR      r0,|L1.356|
0000aa  f7fffffe          BL       GPIO_PinAFConfig
;;;165    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
0000ae  220c              MOVS     r2,#0xc
0000b0  2108              MOVS     r1,#8
0000b2  482c              LDR      r0,|L1.356|
0000b4  f7fffffe          BL       GPIO_PinAFConfig
;;;166    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
0000b8  220c              MOVS     r2,#0xc
0000ba  2109              MOVS     r1,#9
0000bc  4829              LDR      r0,|L1.356|
0000be  f7fffffe          BL       GPIO_PinAFConfig
;;;167    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
0000c2  220c              MOVS     r2,#0xc
0000c4  210a              MOVS     r1,#0xa
0000c6  4827              LDR      r0,|L1.356|
0000c8  f7fffffe          BL       GPIO_PinAFConfig
;;;168    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
0000cc  220c              MOVS     r2,#0xc
0000ce  210b              MOVS     r1,#0xb
0000d0  4824              LDR      r0,|L1.356|
0000d2  f7fffffe          BL       GPIO_PinAFConfig
;;;169    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
0000d6  220c              MOVS     r2,#0xc
0000d8  4611              MOV      r1,r2
0000da  4822              LDR      r0,|L1.356|
0000dc  f7fffffe          BL       GPIO_PinAFConfig
;;;170    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
0000e0  220c              MOVS     r2,#0xc
0000e2  210d              MOVS     r1,#0xd
0000e4  481f              LDR      r0,|L1.356|
0000e6  f7fffffe          BL       GPIO_PinAFConfig
;;;171    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
0000ea  220c              MOVS     r2,#0xc
0000ec  210e              MOVS     r1,#0xe
0000ee  481d              LDR      r0,|L1.356|
0000f0  f7fffffe          BL       GPIO_PinAFConfig
;;;172    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
0000f4  220c              MOVS     r2,#0xc
0000f6  210f              MOVS     r1,#0xf
0000f8  481a              LDR      r0,|L1.356|
0000fa  f7fffffe          BL       GPIO_PinAFConfig
;;;173    
;;;174    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
0000fe  f64f70b0          MOV      r0,#0xffb0
000102  9000              STR      r0,[sp,#0]
;;;175    	                            GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |
;;;176    	                            GPIO_Pin_15;
;;;177    	GPIO_Init(GPIOE, &GPIO_InitStructure);
000104  4669              MOV      r1,sp
000106  4817              LDR      r0,|L1.356|
000108  f7fffffe          BL       GPIO_Init
;;;178    
;;;179    	/* 设置 PG12  为复用推挽输出 */
;;;180    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_FSMC);
00010c  220c              MOVS     r2,#0xc
00010e  4611              MOV      r1,r2
000110  4815              LDR      r0,|L1.360|
000112  f7fffffe          BL       GPIO_PinAFConfig
;;;181    
;;;182    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
000116  f44f5080          MOV      r0,#0x1000
00011a  9000              STR      r0,[sp,#0]
;;;183    	GPIO_Init(GPIOG, &GPIO_InitStructure);
00011c  4669              MOV      r1,sp
00011e  4812              LDR      r0,|L1.360|
000120  f7fffffe          BL       GPIO_Init
;;;184    
;;;185    	/*	配置几个控制用的GPIO
;;;186    		PH9/DCMI_D0/AD7606_OS0			---> AD7606_OS0		OS2:OS0 选择数字滤波参数
;;;187    		PH10/DCMI_D1/AD7606_OS1         ---> AD7606_OS1
;;;188    		PH11/DCMI_D2/AD7606_OS2         ---> AD7606_OS2
;;;189    		PH12/DCMI_D3/AD7606_CONVST      ---> AD7606_CONVST	启动ADC转换
;;;190    		PH14/DCMI_D4/AD7606_RAGE        ---> AD7606_RAGE	输入模拟电压量程，正负5V或正负10V
;;;191    		PI4/DCMI_D5/AD7606_RESET        ---> AD7606_RESET	复位
;;;192    
;;;193    		PI6/DCMI_D6/AD7606_BUSY			---> AD7606_BUSY    转换结束的信号
;;;194    	*/
;;;195    	{
;;;196    		/* 使能 GPIO时钟 */
;;;197    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH | RCC_AHB1Periph_GPIOI, ENABLE);
000124  2101              MOVS     r1,#1
000126  f44f70c0          MOV      r0,#0x180
00012a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;198    
;;;199    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00012e  2001              MOVS     r0,#1
000130  f88d0004          STRB     r0,[sp,#4]
;;;200    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000134  2003              MOVS     r0,#3
000136  f88d0005          STRB     r0,[sp,#5]
;;;201    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00013a  2000              MOVS     r0,#0
00013c  f88d0006          STRB     r0,[sp,#6]
;;;202    		GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000140  f88d0007          STRB     r0,[sp,#7]
;;;203    
;;;204    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_14;
000144  f44f40bc          MOV      r0,#0x5e00
000148  9000              STR      r0,[sp,#0]
;;;205    		GPIO_Init(GPIOH, &GPIO_InitStructure);
00014a  4669              MOV      r1,sp
00014c  4807              LDR      r0,|L1.364|
00014e  f7fffffe          BL       GPIO_Init
;;;206    
;;;207    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
000152  2010              MOVS     r0,#0x10
000154  9000              STR      r0,[sp,#0]
;;;208    		GPIO_Init(GPIOI, &GPIO_InitStructure);
000156  4669              MOV      r1,sp
000158  4805              LDR      r0,|L1.368|
00015a  f7fffffe          BL       GPIO_Init
;;;209    	}
;;;210    }
00015e  bd1c              POP      {r2-r4,pc}
;;;211    
                          ENDP

                  |L1.352|
                          DCD      0x40020c00
                  |L1.356|
                          DCD      0x40021000
                  |L1.360|
                          DCD      0x40021800
                  |L1.364|
                          DCD      0x40021c00
                  |L1.368|
                          DCD      0x40022000

                          AREA ||i.AD7606_FSMCConfig||, CODE, READONLY, ALIGN=1

                  AD7606_FSMCConfig PROC
;;;219    */
;;;220    static void AD7606_FSMCConfig(void)
000000  b500              PUSH     {lr}
;;;221    {
000002  b097              SUB      sp,sp,#0x5c
;;;222    	FSMC_NORSRAMInitTypeDef  init;
;;;223    	FSMC_NORSRAMTimingInitTypeDef  timing;
;;;224    
;;;225    	/*
;;;226    		AD7606规格书要求(3.3V时)：RD读信号低电平脉冲宽度最短21ns，高电平脉冲最短宽度15ns。
;;;227    
;;;228    		按照如下配置 读数均正常。为了和同BANK的LCD配置相同，选择3-0-6-1-0-0
;;;229    		3-0-5-1-0-0  : RD高持续75ns， 低电平持续50ns.  1us以内可读取8路样本数据到内存。
;;;230    		1-0-1-1-0-0  : RD高75ns，低电平执行12ns左右，下降沿差不多也12ns.  数据读取正确。
;;;231    	*/
;;;232    	/* FSMC_Bank1_NORSRAM4 configuration */
;;;233    	timing.FSMC_AddressSetupTime = 3;
000004  2003              MOVS     r0,#3
000006  9001              STR      r0,[sp,#4]
;;;234    	timing.FSMC_AddressHoldTime = 0;
000008  2000              MOVS     r0,#0
00000a  9002              STR      r0,[sp,#8]
;;;235    	timing.FSMC_DataSetupTime = 6;
00000c  2006              MOVS     r0,#6
00000e  9003              STR      r0,[sp,#0xc]
;;;236    	timing.FSMC_BusTurnAroundDuration = 1;
000010  2001              MOVS     r0,#1
000012  9004              STR      r0,[sp,#0x10]
;;;237    	timing.FSMC_CLKDivision = 0;
000014  2000              MOVS     r0,#0
000016  9005              STR      r0,[sp,#0x14]
;;;238    	timing.FSMC_DataLatency = 0;
000018  9006              STR      r0,[sp,#0x18]
;;;239    	timing.FSMC_AccessMode = FSMC_AccessMode_A;
00001a  9007              STR      r0,[sp,#0x1c]
;;;240    
;;;241    	/*
;;;242    	 LCD configured as follow:
;;;243    	    - Data/Address MUX = Disable
;;;244    	    - Memory Type = SRAM
;;;245    	    - Data Width = 16bit
;;;246    	    - Write Operation = Enable
;;;247    	    - Extended Mode = Enable
;;;248    	    - Asynchronous Wait = Disable
;;;249    	*/
;;;250    	init.FSMC_Bank = FSMC_Bank1_NORSRAM4;
00001c  2006              MOVS     r0,#6
00001e  9008              STR      r0,[sp,#0x20]
;;;251    	init.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
000020  2000              MOVS     r0,#0
000022  9009              STR      r0,[sp,#0x24]
;;;252    	init.FSMC_MemoryType = FSMC_MemoryType_SRAM;
000024  900a              STR      r0,[sp,#0x28]
;;;253    	init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
000026  2010              MOVS     r0,#0x10
000028  900b              STR      r0,[sp,#0x2c]
;;;254    	init.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00002a  2000              MOVS     r0,#0
00002c  900c              STR      r0,[sp,#0x30]
;;;255    	init.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
00002e  900d              STR      r0,[sp,#0x34]
;;;256    	init.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000030  900e              STR      r0,[sp,#0x38]
;;;257    	init.FSMC_WrapMode = FSMC_WrapMode_Disable;
000032  900f              STR      r0,[sp,#0x3c]
;;;258    	init.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000034  9010              STR      r0,[sp,#0x40]
;;;259    	init.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000036  f44f5080          MOV      r0,#0x1000
00003a  9011              STR      r0,[sp,#0x44]
;;;260    	init.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
00003c  2000              MOVS     r0,#0
00003e  9012              STR      r0,[sp,#0x48]
;;;261    	init.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000040  9013              STR      r0,[sp,#0x4c]
;;;262    	init.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000042  9014              STR      r0,[sp,#0x50]
;;;263    
;;;264    	init.FSMC_ReadWriteTimingStruct = &timing;
000044  a801              ADD      r0,sp,#4
000046  9015              STR      r0,[sp,#0x54]
;;;265    	init.FSMC_WriteTimingStruct = &timing;
000048  9016              STR      r0,[sp,#0x58]
;;;266    
;;;267    	FSMC_NORSRAMInit(&init);
00004a  a808              ADD      r0,sp,#0x20
00004c  f7fffffe          BL       FSMC_NORSRAMInit
;;;268    
;;;269    	/* - BANK 1 (of NOR/SRAM Bank 1~4) is enabled */
;;;270    	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);
000050  2101              MOVS     r1,#1
000052  2006              MOVS     r0,#6
000054  f7fffffe          BL       FSMC_NORSRAMCmd
;;;271    }
000058  b017              ADD      sp,sp,#0x5c
00005a  bd00              POP      {pc}
;;;272    
                          ENDP


                          AREA ||i.AD7606_ReadNowAdc||, CODE, READONLY, ALIGN=2

                  AD7606_ReadNowAdc PROC
;;;409    */
;;;410    void AD7606_ReadNowAdc(void)
000000  4823              LDR      r0,|L3.144|
;;;411    {
;;;412    	g_tAD7606.sNowAdc[0] = AD7606_RESULT();	/* 读第1路样本 */
000002  8800              LDRH     r0,[r0,#0]
000004  4923              LDR      r1,|L3.148|
000006  8248              STRH     r0,[r1,#0x12]
;;;413    	g_tAD7606.sNowAdc[1] = AD7606_RESULT();	/* 读第2路样本 */
000008  4821              LDR      r0,|L3.144|
00000a  8801              LDRH     r1,[r0,#0]
00000c  4821              LDR      r0,|L3.148|
00000e  8281              STRH     r1,[r0,#0x14]
;;;414    	g_tAD7606.sNowAdc[2] = AD7606_RESULT();	/* 读第3路样本 */
000010  481f              LDR      r0,|L3.144|
000012  8801              LDRH     r1,[r0,#0]
000014  481f              LDR      r0,|L3.148|
000016  82c1              STRH     r1,[r0,#0x16]
;;;415    	g_tAD7606.sNowAdc[3] = AD7606_RESULT();	/* 读第4路样本 */
000018  481d              LDR      r0,|L3.144|
00001a  8801              LDRH     r1,[r0,#0]
00001c  481d              LDR      r0,|L3.148|
00001e  8301              STRH     r1,[r0,#0x18]
;;;416    	g_tAD7606.sNowAdc[4] = AD7606_RESULT();	/* 读第5路样本 */
000020  481b              LDR      r0,|L3.144|
000022  8801              LDRH     r1,[r0,#0]
000024  481b              LDR      r0,|L3.148|
000026  8341              STRH     r1,[r0,#0x1a]
;;;417    	g_tAD7606.sNowAdc[5] = AD7606_RESULT();	/* 读第6路样本 */
000028  4819              LDR      r0,|L3.144|
00002a  8801              LDRH     r1,[r0,#0]
00002c  4819              LDR      r0,|L3.148|
00002e  8381              STRH     r1,[r0,#0x1c]
;;;418    	g_tAD7606.sNowAdc[6] = AD7606_RESULT();	/* 读第7路样本 */
000030  4817              LDR      r0,|L3.144|
000032  8801              LDRH     r1,[r0,#0]
000034  4817              LDR      r0,|L3.148|
000036  83c1              STRH     r1,[r0,#0x1e]
;;;419    	g_tAD7606.sNowAdc[7] = AD7606_RESULT();	/* 读第8路样本 */
000038  4815              LDR      r0,|L3.144|
00003a  8801              LDRH     r1,[r0,#0]
00003c  4815              LDR      r0,|L3.148|
00003e  8401              STRH     r1,[r0,#0x20]
;;;420    	
;;;421    
;;;422    	for( i=0;i<8;i++)
000040  2000              MOVS     r0,#0
000042  4915              LDR      r1,|L3.152|
000044  7008              STRB     r0,[r1,#0]
000046  e01e              B        |L3.134|
                  |L3.72|
;;;423    			{
;;;424    				g_tAD7606.tcpadc[i*2+1] = g_tAD7606.sNowAdc[i] & 0x00ff;       // ??8?
000048  4812              LDR      r0,|L3.148|
00004a  3012              ADDS     r0,r0,#0x12
00004c  4912              LDR      r1,|L3.152|
00004e  7809              LDRB     r1,[r1,#0]  ; i
000050  f8101011          LDRB     r1,[r0,r1,LSL #1]
000054  4810              LDR      r0,|L3.152|
000056  7800              LDRB     r0,[r0,#0]  ; i
000058  2201              MOVS     r2,#1
00005a  eb020240          ADD      r2,r2,r0,LSL #1
00005e  480d              LDR      r0,|L3.148|
000060  1c80              ADDS     r0,r0,#2
000062  5481              STRB     r1,[r0,r2]
;;;425    				g_tAD7606.tcpadc[i*2] = g_tAD7606.sNowAdc[i] >> 8;       //??8?
000064  3010              ADDS     r0,r0,#0x10
000066  490c              LDR      r1,|L3.152|
000068  7809              LDRB     r1,[r1,#0]  ; i
00006a  f8300011          LDRH     r0,[r0,r1,LSL #1]
00006e  1202              ASRS     r2,r0,#8
000070  4809              LDR      r0,|L3.152|
000072  7800              LDRB     r0,[r0,#0]  ; i
000074  4907              LDR      r1,|L3.148|
000076  1c89              ADDS     r1,r1,#2
000078  f8012010          STRB     r2,[r1,r0,LSL #1]
00007c  4806              LDR      r0,|L3.152|
00007e  7800              LDRB     r0,[r0,#0]            ;422  ; i
000080  1c40              ADDS     r0,r0,#1              ;422
000082  4905              LDR      r1,|L3.152|
000084  7008              STRB     r0,[r1,#0]            ;422
                  |L3.134|
000086  4804              LDR      r0,|L3.152|
000088  7800              LDRB     r0,[r0,#0]            ;422  ; i
00008a  2808              CMP      r0,#8                 ;422
00008c  dbdc              BLT      |L3.72|
;;;426    			}
;;;427    
;;;428    }
00008e  4770              BX       lr
;;;429    
                          ENDP

                  |L3.144|
                          DCD      0x6c400000
                  |L3.148|
                          DCD      g_tAD7606
                  |L3.152|
                          DCD      i

                          AREA ||i.AD7606_Reset||, CODE, READONLY, ALIGN=2

                  AD7606_Reset PROC
;;;370    */
;;;371    void AD7606_Reset(void)
000000  2010              MOVS     r0,#0x10
;;;372    {
;;;373    	RESET_0();	/* 退出复位状态 */
000002  4904              LDR      r1,|L4.20|
000004  8348              STRH     r0,[r1,#0x1a]
;;;374    
;;;375    	RESET_1();	/* 进入复位状态 */
000006  8308              STRH     r0,[r1,#0x18]
;;;376    	RESET_1();	/* 仅用于延迟。 RESET复位高电平脉冲宽度最小50ns。 */
000008  8308              STRH     r0,[r1,#0x18]
;;;377    	RESET_1();
00000a  8308              STRH     r0,[r1,#0x18]
;;;378    	RESET_1();
00000c  8308              STRH     r0,[r1,#0x18]
;;;379    
;;;380    	RESET_0();	/* 退出复位状态 */
00000e  8348              STRH     r0,[r1,#0x1a]
;;;381    }
000010  4770              BX       lr
;;;382    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40022000

                          AREA ||i.AD7606_SetInputRange||, CODE, READONLY, ALIGN=2

                  AD7606_SetInputRange PROC
;;;348    */
;;;349    void AD7606_SetInputRange(uint8_t _ucRange)
000000  b938              CBNZ     r0,|L5.18|
;;;350    {
;;;351    	if (_ucRange == 0)
;;;352    	{
;;;353    		g_tAD7606.ucRange = 0;
000002  2100              MOVS     r1,#0
000004  4a07              LDR      r2,|L5.36|
000006  7051              STRB     r1,[r2,#1]
;;;354    		RANGE_0();	/* 设置为正负5V */
000008  f44f4180          MOV      r1,#0x4000
00000c  4a06              LDR      r2,|L5.40|
00000e  8011              STRH     r1,[r2,#0]
000010  e006              B        |L5.32|
                  |L5.18|
;;;355    	}
;;;356    	else
;;;357    	{
;;;358    		g_tAD7606.ucRange = 1;
000012  2101              MOVS     r1,#1
000014  4a03              LDR      r2,|L5.36|
000016  7051              STRB     r1,[r2,#1]
;;;359    		RANGE_1();	/* 设置为正负10V */
000018  0389              LSLS     r1,r1,#14
00001a  4a03              LDR      r2,|L5.40|
00001c  1e92              SUBS     r2,r2,#2
00001e  8011              STRH     r1,[r2,#0]
                  |L5.32|
;;;360    	}
;;;361    }
000020  4770              BX       lr
;;;362    
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      g_tAD7606
                  |L5.40|
                          DCD      0x40021c1a

                          AREA ||i.AD7606_SetOS||, CODE, READONLY, ALIGN=2

                  AD7606_SetOS PROC
;;;289    */
;;;290    void AD7606_SetOS(uint8_t _ucOS)
000000  492c              LDR      r1,|L6.180|
;;;291    {
;;;292    	g_tAD7606.ucOS = _ucOS;
000002  7008              STRB     r0,[r1,#0]
;;;293    	switch (_ucOS)
000004  2807              CMP      r0,#7
000006  d246              BCS      |L6.150|
000008  e8dff000          TBB      [pc,r0]
00000c  46040e19          DCB      0x46,0x04,0x0e,0x19
000010  232e3a00          DCB      0x23,0x2e,0x3a,0x00
;;;294    	{
;;;295    		case AD_OS_X2:
;;;296    			OS2_0();
000014  f44f6100          MOV      r1,#0x800
000018  4a27              LDR      r2,|L6.184|
00001a  8011              STRH     r1,[r2,#0]
;;;297    			OS1_0();
00001c  1049              ASRS     r1,r1,#1
00001e  8011              STRH     r1,[r2,#0]
;;;298    			OS0_1();
000020  1049              ASRS     r1,r1,#1
000022  1e92              SUBS     r2,r2,#2
000024  8011              STRH     r1,[r2,#0]
;;;299    			break;
000026  e043              B        |L6.176|
;;;300    
;;;301    		case AD_OS_X4:
;;;302    			OS2_0();
000028  f44f6100          MOV      r1,#0x800
00002c  4a22              LDR      r2,|L6.184|
00002e  8011              STRH     r1,[r2,#0]
;;;303    			OS1_1();
000030  1049              ASRS     r1,r1,#1
000032  1e92              SUBS     r2,r2,#2
000034  8011              STRH     r1,[r2,#0]
;;;304    			OS0_0();
000036  1049              ASRS     r1,r1,#1
000038  1c92              ADDS     r2,r2,#2
00003a  8011              STRH     r1,[r2,#0]
;;;305    			break;
00003c  e038              B        |L6.176|
;;;306    
;;;307    		case AD_OS_X8:
;;;308    			OS2_0();
00003e  f44f6100          MOV      r1,#0x800
000042  4a1d              LDR      r2,|L6.184|
000044  8011              STRH     r1,[r2,#0]
;;;309    			OS1_1();
000046  1049              ASRS     r1,r1,#1
000048  1e92              SUBS     r2,r2,#2
00004a  8011              STRH     r1,[r2,#0]
;;;310    			OS0_1();
00004c  1049              ASRS     r1,r1,#1
00004e  8011              STRH     r1,[r2,#0]
;;;311    			break;
000050  e02e              B        |L6.176|
;;;312    
;;;313    		case AD_OS_X16:
;;;314    			OS2_1();
000052  f44f6100          MOV      r1,#0x800
000056  4a18              LDR      r2,|L6.184|
000058  1e92              SUBS     r2,r2,#2
00005a  8011              STRH     r1,[r2,#0]
;;;315    			OS1_0();
00005c  1049              ASRS     r1,r1,#1
00005e  1c92              ADDS     r2,r2,#2
000060  8011              STRH     r1,[r2,#0]
;;;316    			OS0_0();
000062  1049              ASRS     r1,r1,#1
000064  8011              STRH     r1,[r2,#0]
;;;317    			break;
000066  e023              B        |L6.176|
;;;318    
;;;319    		case AD_OS_X32:
;;;320    			OS2_1();
000068  f44f6100          MOV      r1,#0x800
00006c  4a12              LDR      r2,|L6.184|
00006e  1e92              SUBS     r2,r2,#2
000070  8011              STRH     r1,[r2,#0]
;;;321    			OS1_0();
000072  1049              ASRS     r1,r1,#1
000074  1c92              ADDS     r2,r2,#2
000076  8011              STRH     r1,[r2,#0]
;;;322    			OS0_1();
000078  1049              ASRS     r1,r1,#1
00007a  1e92              SUBS     r2,r2,#2
00007c  8011              STRH     r1,[r2,#0]
;;;323    			break;
00007e  e017              B        |L6.176|
;;;324    
;;;325    		case AD_OS_X64:
;;;326    			OS2_1();
000080  f44f6100          MOV      r1,#0x800
000084  4a0c              LDR      r2,|L6.184|
000086  1e92              SUBS     r2,r2,#2
000088  8011              STRH     r1,[r2,#0]
;;;327    			OS1_1();
00008a  1049              ASRS     r1,r1,#1
00008c  8011              STRH     r1,[r2,#0]
;;;328    			OS0_0();
00008e  1049              ASRS     r1,r1,#1
000090  1c92              ADDS     r2,r2,#2
000092  8011              STRH     r1,[r2,#0]
;;;329    			break;
000094  e00c              B        |L6.176|
                  |L6.150|
;;;330    
;;;331    		case AD_OS_NO:
000096  bf00              NOP      
;;;332    		default:
;;;333    			g_tAD7606.ucOS = AD_OS_NO;
000098  2100              MOVS     r1,#0
00009a  4a06              LDR      r2,|L6.180|
00009c  7011              STRB     r1,[r2,#0]
;;;334    			OS2_0();
00009e  f44f6100          MOV      r1,#0x800
0000a2  4a05              LDR      r2,|L6.184|
0000a4  8011              STRH     r1,[r2,#0]
;;;335    			OS1_0();
0000a6  1049              ASRS     r1,r1,#1
0000a8  8011              STRH     r1,[r2,#0]
;;;336    			OS0_0();
0000aa  1049              ASRS     r1,r1,#1
0000ac  8011              STRH     r1,[r2,#0]
;;;337    			break;
0000ae  bf00              NOP      
                  |L6.176|
0000b0  bf00              NOP                            ;299
;;;338    	}
;;;339    }
0000b2  4770              BX       lr
;;;340    
                          ENDP

                  |L6.180|
                          DCD      g_tAD7606
                  |L6.184|
                          DCD      0x40021c1a

                          AREA ||i.AD7606_StartConvst||, CODE, READONLY, ALIGN=2

                  AD7606_StartConvst PROC
;;;390    */
;;;391    void AD7606_StartConvst(void)
000000  f44f5080          MOV      r0,#0x1000
;;;392    {
;;;393    	/* page 7：  CONVST 高电平脉冲宽度和低电平脉冲宽度最短 25ns */
;;;394    	/* CONVST平时为高 */
;;;395    	CONVST_0();
000004  4903              LDR      r1,|L7.20|
000006  8008              STRH     r0,[r1,#0]
;;;396    	CONVST_0();
000008  8008              STRH     r0,[r1,#0]
;;;397    	CONVST_0();
00000a  8008              STRH     r0,[r1,#0]
;;;398    
;;;399    	CONVST_1();
00000c  1e89              SUBS     r1,r1,#2
00000e  8008              STRH     r0,[r1,#0]
;;;400    }
000010  4770              BX       lr
;;;401    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40021c1a

                          AREA ||i.bsp_InitAD7606||, CODE, READONLY, ALIGN=2

                  bsp_InitAD7606 PROC
;;;61     */
;;;62     void bsp_InitAD7606(void)
000000  b510              PUSH     {r4,lr}
;;;63     {
;;;64     	AD7606_CtrlLinesConfig();
000002  f7fffffe          BL       AD7606_CtrlLinesConfig
;;;65     	AD7606_FSMCConfig();
000006  f7fffffe          BL       AD7606_FSMCConfig
;;;66     
;;;67     	AD7606_SetOS(AD_OS_NO);		/* 无过采样 */
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       AD7606_SetOS
;;;68     	AD7606_SetInputRange(0);	/* 0表示输入量程为正负5V, 1表示正负10V */
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       AD7606_SetInputRange
;;;69     
;;;70     	AD7606_Reset();
000016  f7fffffe          BL       AD7606_Reset
;;;71     
;;;72     	CONVST_1();					/* 启动转换的GPIO平时设置为高 */
00001a  f44f5080          MOV      r0,#0x1000
00001e  4901              LDR      r1,|L8.36|
000020  8008              STRH     r0,[r1,#0]
;;;73     }
000022  bd10              POP      {r4,pc}
;;;74     
                          ENDP

                  |L8.36|
                          DCD      0x40021c18

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_tAD7606
                          %        34
                  g_tAdcFifo
                          %        4104

                          AREA ||.data||, DATA, ALIGN=0

                  i
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_ad7606.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_bsp_ad7606_c_61266efb____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_bsp_ad7606_c_61266efb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_bsp_ad7606_c_61266efb____REVSH|
#line 144
|__asm___12_bsp_ad7606_c_61266efb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
