; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\app_tcpnet_lib.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\app_tcpnet_lib.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RL-ARM\Driver -I..\..\RL-ARM\Config -I..\..\RL-ARM\RL-RTX\inc -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40XX ..\..\User\app_tcpnet_lib.c]
                          THUMB

                          AREA ||i.TCP_StatusCheck||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  TCP_StatusCheck PROC
;;;150    */
;;;151    uint8_t TCP_StatusCheck(void) 
000000  b510              PUSH     {r4,lr}
;;;152    {
;;;153    	switch (tcp_get_state(socket_tcp)) 
000002  4811              LDR      r0,|L1.72|
000004  7800              LDRB     r0,[r0,#0]  ; socket_tcp
000006  f7fffffe          BL       tcp_get_state
00000a  b130              CBZ      r0,|L1.26|
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L1.28|
000010  2802              CMP      r0,#2
000012  d012              BEQ      |L1.58|
000014  280a              CMP      r0,#0xa
000016  d113              BNE      |L1.64|
000018  e010              B        |L1.60|
                  |L1.26|
;;;154    	{
;;;155    		case TCP_STATE_FREE:
;;;156    		case TCP_STATE_CLOSED:
00001a  bf00              NOP      
                  |L1.28|
;;;157    			{
;;;158    				/* 这里默认不开启调试，否则未跟电脑端服务器连接前会一直发 */
;;;159    				#if 1
;;;160    				  uint8_t res;
;;;161    				  res = tcp_connect (socket_tcp, Rem_IP, PORT_NUM, LocalPort_NUM);
00001c  f44f6380          MOV      r3,#0x400
000020  f24032e9          MOV      r2,#0x3e9
000024  4909              LDR      r1,|L1.76|
000026  4808              LDR      r0,|L1.72|
000028  7800              LDRB     r0,[r0,#0]  ; socket_tcp
00002a  f7fffffe          BL       tcp_connect
00002e  b2c4              UXTB     r4,r0
;;;162    				  printf_debug("tcp connect res = %d\r\n", res);
000030  4621              MOV      r1,r4
000032  a007              ADR      r0,|L1.80|
000034  f7fffffe          BL       __2printf
;;;163                    #else
;;;164    				  tcp_connect (socket_tcp, Rem_IP, PORT_NUM, LocalPort_NUM);
;;;165    				#endif
;;;166    			}
;;;167    			break;
000038  e003              B        |L1.66|
                  |L1.58|
;;;168    		
;;;169    		case TCP_STATE_LISTEN:
;;;170    			break;
00003a  e002              B        |L1.66|
                  |L1.60|
;;;171    		
;;;172    		case TCP_STATE_CONNECT:
;;;173    			return (__TRUE);
00003c  2001              MOVS     r0,#1
                  |L1.62|
;;;174    			
;;;175    		default:  
;;;176    			break;
;;;177    	}
;;;178    	
;;;179    	return (__FALSE);
;;;180    }
00003e  bd10              POP      {r4,pc}
                  |L1.64|
000040  bf00              NOP                            ;176
                  |L1.66|
000042  bf00              NOP                            ;167
000044  2000              MOVS     r0,#0                 ;179
000046  e7fa              B        |L1.62|
;;;181    
                          ENDP

                  |L1.72|
                          DCD      socket_tcp
                  |L1.76|
                          DCD      Rem_IP
                  |L1.80|
000050  74637020          DCB      "tcp connect res = %d\r\n",0
000054  636f6e6e
000058  65637420
00005c  72657320
000060  3d202564
000064  0d0a00  
000067  00                DCB      0

                          AREA ||i.TCPnetTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  TCPnetTest PROC
;;;208    */
;;;209    void TCPnetTest(void)
000000  b510              PUSH     {r4,lr}
;;;210    {  
;;;211    	int32_t iCount;
;;;212    	uint8_t *sendbuf;
;;;213    	uint8_t tcp_status;
;;;214    	uint16_t maxlen;
;;;215    	uint8_t res;
;;;216    	uint8_t ucKeyCode;
;;;217    	
;;;218    	
;;;219    	/* 初始化网络协议栈 */
;;;220    	init_TcpNet ();
000002  f7fffffe          BL       init_TcpNet
;;;221    
;;;222    	/* 
;;;223    	   创建TCP Socket并连接，客户端连接服务器后，10秒内无数据通信将断开连接。
;;;224    	   但是由于这里使能了TCP_TYPE_KEEP_ALIVE，会一直保持连接，不受10秒的时间限制。
;;;225    	*/
;;;226        socket_tcp = tcp_get_socket (TCP_TYPE_CLIENT | TCP_TYPE_KEEP_ALIVE, 0, 10, tcp_callback);
000006  4b0f              LDR      r3,|L2.68|
000008  220a              MOVS     r2,#0xa
00000a  2100              MOVS     r1,#0
00000c  2012              MOVS     r0,#0x12
00000e  f7fffffe          BL       tcp_get_socket
000012  490d              LDR      r1,|L2.72|
000014  7008              STRB     r0,[r1,#0]
;;;227    	if(socket_tcp != 0)
000016  4608              MOV      r0,r1
000018  7800              LDRB     r0,[r0,#0]  ; socket_tcp
00001a  b168              CBZ      r0,|L2.56|
;;;228    	{
;;;229    		res = tcp_connect (socket_tcp, Rem_IP, PORT_NUM, LocalPort_NUM);
00001c  f44f6380          MOV      r3,#0x400
000020  f24032e9          MOV      r2,#0x3e9
000024  4909              LDR      r1,|L2.76|
000026  4808              LDR      r0,|L2.72|
000028  7800              LDRB     r0,[r0,#0]  ; socket_tcp
00002a  f7fffffe          BL       tcp_connect
00002e  b2c4              UXTB     r4,r0
;;;230    		printf("TCP Socket创建成功res = %d\r\n", res);
000030  4621              MOV      r1,r4
000032  a007              ADR      r0,|L2.80|
000034  f7fffffe          BL       __2printf
                  |L2.56|
;;;231    	}
;;;232    
;;;233    	/* 创建一个周期是100ms的软定时器 */
;;;234        bsp_StartAutoTimer(0, 100);
000038  2164              MOVS     r1,#0x64
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       bsp_StartAutoTimer
;;;235    }
000040  bd10              POP      {r4,pc}
;;;236    
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      tcp_callback
                  |L2.72|
                          DCD      socket_tcp
                  |L2.76|
                          DCD      Rem_IP
                  |L2.80|
000050  54435020          DCB      "TCP Socket",180,180,189,168,179,201,185,166,"res = %d\r"
000054  536f636b
000058  6574b4b4
00005c  bda8b3c9
000060  b9a67265
000064  73203d20
000068  25640d  
00006b  0a00              DCB      "\n",0
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.tcp_callback||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  tcp_callback PROC
;;;87     */
;;;88     U16 tcp_callback (U8 soc, U8 evt, U8 *ptr, U16 par)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     {
000004  b090              SUB      sp,sp,#0x40
000006  4680              MOV      r8,r0
000008  460f              MOV      r7,r1
00000a  4614              MOV      r4,r2
00000c  461e              MOV      r6,r3
;;;90     	char buf[50];
;;;91     	uint16_t i;
;;;92     	
;;;93     	/* 确保是socket_tcp的回调 */
;;;94     	if (soc != socket_tcp) 
00000e  481e              LDR      r0,|L3.136|
000010  7800              LDRB     r0,[r0,#0]  ; socket_tcp
000012  4580              CMP      r8,r0
000014  d003              BEQ      |L3.30|
;;;95     	{
;;;96     		return (0);
000016  2000              MOVS     r0,#0
                  |L3.24|
;;;97     	}
;;;98     
;;;99     	switch (evt) 
;;;100    	{
;;;101    		/*
;;;102    			远程客户端连接消息
;;;103    		    1、数组ptr存储远程设备的IP地址，par中存储端口号。
;;;104    		    2、返回数值1允许连接，返回数值0禁止连接。
;;;105    		*/
;;;106    		case TCP_EVT_CONREQ:
;;;107    			sprintf(buf, "远程客户端请求连接IP: %d.%d.%d.%d", ptr[0], ptr[1], ptr[2], ptr[3]);
;;;108    			printf_debug("IP:%s  port:%d\r\n", buf, par);
;;;109    			return (1);
;;;110    		
;;;111    		/* 连接终止 */
;;;112    		case TCP_EVT_ABORT:
;;;113    			break;
;;;114    		
;;;115    		/* Socket远程连接已经建立 */
;;;116    		case TCP_EVT_CONNECT:
;;;117    			printf_debug("Socket is connected to remote peer\r\n");
;;;118    			break;
;;;119    		
;;;120    		/* 连接断开 */
;;;121    		case TCP_EVT_CLOSE:
;;;122    		   	printf_debug("Connection has been closed\r\n");
;;;123    			break;
;;;124    		
;;;125    		/* 发送的数据收到远程设备应答 */
;;;126    		case TCP_EVT_ACK:
;;;127    			break;
;;;128    		
;;;129    		/* 接收到TCP数据帧，ptr指向数据地址，par记录数据长度，单位字节 */
;;;130    		case TCP_EVT_DATA:
;;;131    			printf_debug("Data length = %d\r\n", par);
;;;132    			for(i = 0; i < par; i++)
;;;133    			{
;;;134    				printf_debug("ptr[%d] = %d\r\n", i, ptr[i]);
;;;135    			}
;;;136    			break;
;;;137    	}
;;;138    	
;;;139    	return (0);
;;;140    }
000018  b010              ADD      sp,sp,#0x40
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L3.30|
00001e  2f06              CMP      r7,#6                 ;99
000020  d22f              BCS      |L3.130|
000022  e8dff007          TBB      [pc,r7]               ;99
000026  0315              DCB      0x03,0x15
000028  19141d1e          DCB      0x19,0x14,0x1d,0x1e
00002c  78e0              LDRB     r0,[r4,#3]            ;107
00002e  78a1              LDRB     r1,[r4,#2]            ;107
000030  e9cd1000          STRD     r1,r0,[sp,#0]         ;107
000034  7863              LDRB     r3,[r4,#1]            ;107
000036  7822              LDRB     r2,[r4,#0]            ;107
000038  a114              ADR      r1,|L3.140|
00003a  a803              ADD      r0,sp,#0xc            ;107
00003c  f7fffffe          BL       __2sprintf
000040  4632              MOV      r2,r6                 ;108
000042  a903              ADD      r1,sp,#0xc            ;108
000044  a01a              ADR      r0,|L3.176|
000046  f7fffffe          BL       __2printf
00004a  2001              MOVS     r0,#1                 ;109
00004c  e7e4              B        |L3.24|
00004e  e018              B        |L3.130|
000050  a01c              ADR      r0,|L3.196|
000052  f7fffffe          BL       __2printf
000056  e014              B        |L3.130|
000058  a024              ADR      r0,|L3.236|
00005a  f7fffffe          BL       __2printf
00005e  e010              B        |L3.130|
000060  e00f              B        |L3.130|
000062  4631              MOV      r1,r6                 ;131
000064  a029              ADR      r0,|L3.268|
000066  f7fffffe          BL       __2printf
00006a  2500              MOVS     r5,#0                 ;132
00006c  e006              B        |L3.124|
                  |L3.110|
00006e  5d62              LDRB     r2,[r4,r5]            ;134
000070  4629              MOV      r1,r5                 ;134
000072  a02b              ADR      r0,|L3.288|
000074  f7fffffe          BL       __2printf
000078  1c68              ADDS     r0,r5,#1              ;132
00007a  b285              UXTH     r5,r0                 ;132
                  |L3.124|
00007c  42b5              CMP      r5,r6                 ;132
00007e  dbf6              BLT      |L3.110|
000080  bf00              NOP                            ;136
                  |L3.130|
000082  bf00              NOP                            ;113
000084  2000              MOVS     r0,#0                 ;139
000086  e7c7              B        |L3.24|
;;;141    
                          ENDP

                  |L3.136|
                          DCD      socket_tcp
                  |L3.140|
00008c  d4b6b3cc          DCB      212,182,179,204,191,205,187,167,182,203,199,235,199,243,193
000090  bfcdbba7
000094  b6cbc7eb
000098  c7f3c1  
00009b  acbdd349          DCB      172,189,211,"IP: %d.%d.%d.%d",0
00009f  503a2025
0000a3  642e2564
0000a7  2e25642e
0000ab  256400  
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L3.176|
0000b0  49503a25          DCB      "IP:%s  port:%d\r\n",0
0000b4  73202070
0000b8  6f72743a
0000bc  25640d0a
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L3.196|
0000c4  536f636b          DCB      "Socket is connected to remote peer\r\n",0
0000c8  65742069
0000cc  7320636f
0000d0  6e6e6563
0000d4  74656420
0000d8  746f2072
0000dc  656d6f74
0000e0  65207065
0000e4  65720d0a
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L3.236|
0000ec  436f6e6e          DCB      "Connection has been closed\r\n",0
0000f0  65637469
0000f4  6f6e2068
0000f8  61732062
0000fc  65656e20
000100  636c6f73
000104  65640d0a
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L3.268|
00010c  44617461          DCB      "Data length = %d\r\n",0
000110  206c656e
000114  67746820
000118  3d202564
00011c  0d0a00  
00011f  00                DCB      0
                  |L3.288|
000120  7074725b          DCB      "ptr[%d] = %d\r\n",0
000124  25645d20
000128  3d202564
00012c  0d0a00  
00012f  00                DCB      0

                          AREA ||i.tcpnet||, CODE, READONLY, ALIGN=2

                  tcpnet PROC
;;;236    
;;;237    	void tcpnet(void)
000000  b570              PUSH     {r4-r6,lr}
;;;238    	{
;;;239    //		int32_t iCount = 8;
;;;240    
;;;241    		uint16_t length;
;;;242    		uint8_t *sendbuf;
;;;243    		/* TCP?? */
;;;244    		tcpnet_poll();
000002  f7fffffe          BL       tcpnet_poll
;;;245    		
;;;246    		/* ????????? */
;;;247    
;;;248    
;;;249    						tcpnet_poll();
000006  f7fffffe          BL       tcpnet_poll
;;;250    						if (tcp_check_send (socket_tcp) == __TRUE) 
00000a  4821              LDR      r0,|L4.144|
00000c  7800              LDRB     r0,[r0,#0]  ; socket_tcp
00000e  f7fffffe          BL       tcp_check_send
000012  2801              CMP      r0,#1
000014  d13a              BNE      |L4.140|
;;;251    						{
;;;252    							length = 16;
000016  2510              MOVS     r5,#0x10
;;;253    							
;;;254    							sendbuf = tcp_get_buf(length);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       tcp_get_buf
00001e  4604              MOV      r4,r0
;;;255    							sendbuf[0] = g_tAD7606.tcpadc[0];
000020  481c              LDR      r0,|L4.148|
000022  7880              LDRB     r0,[r0,#2]  ; g_tAD7606
000024  7020              STRB     r0,[r4,#0]
;;;256    							sendbuf[1] = g_tAD7606.tcpadc[1];
000026  481b              LDR      r0,|L4.148|
000028  78c0              LDRB     r0,[r0,#3]
00002a  7060              STRB     r0,[r4,#1]
;;;257    							sendbuf[2] = g_tAD7606.tcpadc[2];
00002c  4819              LDR      r0,|L4.148|
00002e  7900              LDRB     r0,[r0,#4]
000030  70a0              STRB     r0,[r4,#2]
;;;258    							sendbuf[3] = g_tAD7606.tcpadc[3];
000032  4818              LDR      r0,|L4.148|
000034  7940              LDRB     r0,[r0,#5]
000036  70e0              STRB     r0,[r4,#3]
;;;259    							sendbuf[4] = g_tAD7606.tcpadc[4];
000038  4816              LDR      r0,|L4.148|
00003a  7980              LDRB     r0,[r0,#6]
00003c  7120              STRB     r0,[r4,#4]
;;;260    							sendbuf[5] = g_tAD7606.tcpadc[5];
00003e  4815              LDR      r0,|L4.148|
000040  79c0              LDRB     r0,[r0,#7]
000042  7160              STRB     r0,[r4,#5]
;;;261    							sendbuf[6] = g_tAD7606.tcpadc[6];
000044  4813              LDR      r0,|L4.148|
000046  7a00              LDRB     r0,[r0,#8]
000048  71a0              STRB     r0,[r4,#6]
;;;262    							sendbuf[7] = g_tAD7606.tcpadc[7];
00004a  4812              LDR      r0,|L4.148|
00004c  7a40              LDRB     r0,[r0,#9]
00004e  71e0              STRB     r0,[r4,#7]
;;;263    							sendbuf[8] = g_tAD7606.tcpadc[8];
000050  4810              LDR      r0,|L4.148|
000052  7a80              LDRB     r0,[r0,#0xa]
000054  7220              STRB     r0,[r4,#8]
;;;264    							sendbuf[9] = g_tAD7606.tcpadc[9];
000056  480f              LDR      r0,|L4.148|
000058  7ac0              LDRB     r0,[r0,#0xb]
00005a  7260              STRB     r0,[r4,#9]
;;;265    							sendbuf[10] = g_tAD7606.tcpadc[10];
00005c  480d              LDR      r0,|L4.148|
00005e  7b00              LDRB     r0,[r0,#0xc]
000060  72a0              STRB     r0,[r4,#0xa]
;;;266    							sendbuf[11] = g_tAD7606.tcpadc[11];
000062  480c              LDR      r0,|L4.148|
000064  7b40              LDRB     r0,[r0,#0xd]
000066  72e0              STRB     r0,[r4,#0xb]
;;;267    							sendbuf[12] = g_tAD7606.tcpadc[12];
000068  480a              LDR      r0,|L4.148|
00006a  7b80              LDRB     r0,[r0,#0xe]
00006c  7320              STRB     r0,[r4,#0xc]
;;;268    							sendbuf[13] = g_tAD7606.tcpadc[13];
00006e  4809              LDR      r0,|L4.148|
000070  7bc0              LDRB     r0,[r0,#0xf]
000072  7360              STRB     r0,[r4,#0xd]
;;;269    							sendbuf[14] = g_tAD7606.tcpadc[14];
000074  4807              LDR      r0,|L4.148|
000076  7c00              LDRB     r0,[r0,#0x10]
000078  73a0              STRB     r0,[r4,#0xe]
;;;270    							sendbuf[15] = g_tAD7606.tcpadc[15];
00007a  4806              LDR      r0,|L4.148|
00007c  7c40              LDRB     r0,[r0,#0x11]
00007e  73e0              STRB     r0,[r4,#0xf]
;;;271    							
;;;272    							/* ????????????? */
;;;273    							tcp_send (socket_tcp, sendbuf , length);
000080  462a              MOV      r2,r5
000082  4621              MOV      r1,r4
000084  4802              LDR      r0,|L4.144|
000086  7800              LDRB     r0,[r0,#0]  ; socket_tcp
000088  f7fffffe          BL       tcp_send
                  |L4.140|
;;;274    					}
;;;275    						
;;;276    
;;;277    			}
00008c  bd70              POP      {r4-r6,pc}
;;;278    /***************************** 安富莱电子 www.armfly.com (END OF FILE) *********************************/
                          ENDP

00008e  0000              DCW      0x0000
                  |L4.144|
                          DCD      socket_tcp
                  |L4.148|
                          DCD      g_tAD7606

                          AREA ||i.tcpnet_poll||, CODE, READONLY, ALIGN=1

                  tcpnet_poll PROC
;;;189    */
;;;190    void tcpnet_poll(void)
000000  b510              PUSH     {r4,lr}
;;;191    {
;;;192    	if(bsp_CheckTimer(0))
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       bsp_CheckTimer
000008  b108              CBZ      r0,|L5.14|
;;;193    	{
;;;194    		/* 此函数坚决不可以放在中断里面跑 */
;;;195    		timer_tick ();
00000a  f7fffffe          BL       timer_tick
                  |L5.14|
;;;196    	}
;;;197    	
;;;198    	main_TcpNet ();
00000e  f7fffffe          BL       main_TcpNet
;;;199    }
000012  bd10              POP      {r4,pc}
;;;200    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  Rem_IP
000000  c0a8170a          DCB      0xc0,0xa8,0x17,0x0a
                  socket_tcp
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app_tcpnet_lib.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_app_tcpnet_lib_c_Rem_IP____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_app_tcpnet_lib_c_Rem_IP____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_app_tcpnet_lib_c_Rem_IP____REVSH|
#line 144
|__asm___16_app_tcpnet_lib_c_Rem_IP____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
