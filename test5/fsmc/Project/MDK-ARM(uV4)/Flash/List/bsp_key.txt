; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_key.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_key.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RL-ARM\Driver -I..\..\RL-ARM\Config -I..\..\RL-ARM\RL-RTX\inc -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\bsp_key.crf ..\..\User\bsp_stm32f4xx\src\bsp_key.c]
                          THUMB

                          AREA ||i.IsKeyDown2||, CODE, READONLY, ALIGN=2

                  IsKeyDown2 PROC
;;;138    	//static uint8_t IsKeyDown1(void) {if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0) return 1;else return 0;}
;;;139    	static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L1.20|
000002  6800              LDR      r0,[r0,#0]
000004  f4105f00          TST      r0,#0x2000
000008  d101              BNE      |L1.14|
00000a  2001              MOVS     r0,#1
                  |L1.12|
00000c  4770              BX       lr
                  |L1.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L1.12|
;;;140    	static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40020810

                          AREA ||i.IsKeyDown3||, CODE, READONLY, ALIGN=2

                  IsKeyDown3 PROC
;;;139    	static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
;;;140    	static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L2.20|
000002  6900              LDR      r0,[r0,#0x10]
000004  f4106f00          TST      r0,#0x800
000008  d101              BNE      |L2.14|
00000a  2001              MOVS     r0,#1
                  |L2.12|
00000c  4770              BX       lr
                  |L2.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L2.12|
;;;141    	static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40022000

                          AREA ||i.IsKeyDown4||, CODE, READONLY, ALIGN=2

                  IsKeyDown4 PROC
;;;140    	static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
;;;141    	static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L3.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0100f04          TST      r0,#4
000008  d101              BNE      |L3.14|
00000a  2001              MOVS     r0,#1
                  |L3.12|
00000c  4770              BX       lr
                  |L3.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L3.12|
;;;142    	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40021c10

                          AREA ||i.IsKeyDown5||, CODE, READONLY, ALIGN=2

                  IsKeyDown5 PROC
;;;141    	static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
;;;142    	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L4.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0100f08          TST      r0,#8
000008  d101              BNE      |L4.14|
00000a  2001              MOVS     r0,#1
                  |L4.12|
00000c  4770              BX       lr
                  |L4.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L4.12|
;;;143    	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40021c10

                          AREA ||i.IsKeyDown6||, CODE, READONLY, ALIGN=2

                  IsKeyDown6 PROC
;;;142    	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
;;;143    	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L5.20|
000002  6800              LDR      r0,[r0,#0]
000004  f4106f00          TST      r0,#0x800
000008  d101              BNE      |L5.14|
00000a  2001              MOVS     r0,#1
                  |L5.12|
00000c  4770              BX       lr
                  |L5.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L5.12|
;;;144    	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40021410

                          AREA ||i.IsKeyDown7||, CODE, READONLY, ALIGN=2

                  IsKeyDown7 PROC
;;;143    	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
;;;144    	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L6.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0100f80          TST      r0,#0x80
000008  d101              BNE      |L6.14|
00000a  2001              MOVS     r0,#1
                  |L6.12|
00000c  4770              BX       lr
                  |L6.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L6.12|
;;;145    	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40021810

                          AREA ||i.IsKeyDown8||, CODE, READONLY, ALIGN=2

                  IsKeyDown8 PROC
;;;144    	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
;;;145    	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L7.20|
000002  6800              LDR      r0,[r0,#0]
000004  f4104f00          TST      r0,#0x8000
000008  d101              BNE      |L7.14|
00000a  2001              MOVS     r0,#1
                  |L7.12|
00000c  4770              BX       lr
                  |L7.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L7.12|
;;;146    #endif
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40021c10

                          AREA ||i.bsp_ClearKey||, CODE, READONLY, ALIGN=2

                  bsp_ClearKey PROC
;;;276    */
;;;277    void bsp_ClearKey(void)
000000  4802              LDR      r0,|L8.12|
;;;278    {
;;;279    	s_tKey.Read = s_tKey.Write;
000002  7ac0              LDRB     r0,[r0,#0xb]  ; s_tKey
000004  4901              LDR      r1,|L8.12|
000006  7288              STRB     r0,[r1,#0xa]
;;;280    }
000008  4770              BX       lr
;;;281    
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      s_tKey

                          AREA ||i.bsp_DetectKey||, CODE, READONLY, ALIGN=2

                  bsp_DetectKey PROC
;;;394    */
;;;395    static void bsp_DetectKey(uint8_t i)
000000  b570              PUSH     {r4-r6,lr}
;;;396    {
000002  4605              MOV      r5,r0
;;;397    	KEY_T *pBtn;
;;;398    
;;;399    	/*
;;;400    		如果没有初始化按键函数，则报错
;;;401    		if (s_tBtn[i].IsKeyDownFunc == 0)
;;;402    		{
;;;403    			printf("Fault : DetectButton(), s_tBtn[i].IsKeyDownFunc undefine");
;;;404    		}
;;;405    	*/
;;;406    
;;;407    	pBtn = &s_tBtn[i];
000004  4830              LDR      r0,|L9.200|
000006  eb001405          ADD      r4,r0,r5,LSL #4
;;;408    	if (pBtn->IsKeyDownFunc())
00000a  6820              LDR      r0,[r4,#0]
00000c  4780              BLX      r0
00000e  2800              CMP      r0,#0
000010  d03e              BEQ      |L9.144|
;;;409    	{
;;;410    		if (pBtn->Count < KEY_FILTER_TIME)
000012  7920              LDRB     r0,[r4,#4]
000014  2805              CMP      r0,#5
000016  da02              BGE      |L9.30|
;;;411    		{
;;;412    			pBtn->Count = KEY_FILTER_TIME;
000018  2005              MOVS     r0,#5
00001a  7120              STRB     r0,[r4,#4]
00001c  e052              B        |L9.196|
                  |L9.30|
;;;413    		}
;;;414    		else if(pBtn->Count < 2 * KEY_FILTER_TIME)
00001e  7920              LDRB     r0,[r4,#4]
000020  280a              CMP      r0,#0xa
000022  da03              BGE      |L9.44|
;;;415    		{
;;;416    			pBtn->Count++;
000024  7920              LDRB     r0,[r4,#4]
000026  1c40              ADDS     r0,r0,#1
000028  7120              STRB     r0,[r4,#4]
00002a  e04b              B        |L9.196|
                  |L9.44|
;;;417    		}
;;;418    		else
;;;419    		{
;;;420    			if (pBtn->State == 0)
00002c  7aa0              LDRB     r0,[r4,#0xa]
00002e  b938              CBNZ     r0,|L9.64|
;;;421    			{
;;;422    				pBtn->State = 1;
000030  2001              MOVS     r0,#1
000032  72a0              STRB     r0,[r4,#0xa]
;;;423    
;;;424    				/* 发送按钮按下的消息 */
;;;425    				bsp_PutKey((uint8_t)(3 * i + 1));
000034  eb050145          ADD      r1,r5,r5,LSL #1
000038  1c49              ADDS     r1,r1,#1
00003a  b2c8              UXTB     r0,r1
00003c  f7fffffe          BL       bsp_PutKey
                  |L9.64|
;;;426    			}
;;;427    
;;;428    			if (pBtn->LongTime > 0)
000040  8920              LDRH     r0,[r4,#8]
000042  2800              CMP      r0,#0
000044  dd3e              BLE      |L9.196|
;;;429    			{
;;;430    				if (pBtn->LongCount < pBtn->LongTime)
000046  88e0              LDRH     r0,[r4,#6]
000048  8921              LDRH     r1,[r4,#8]
00004a  4288              CMP      r0,r1
00004c  da0d              BGE      |L9.106|
;;;431    				{
;;;432    					/* 发送按钮持续按下的消息 */
;;;433    					if (++pBtn->LongCount == pBtn->LongTime)
00004e  88e0              LDRH     r0,[r4,#6]
000050  1c40              ADDS     r0,r0,#1
000052  b280              UXTH     r0,r0
000054  80e0              STRH     r0,[r4,#6]
000056  8921              LDRH     r1,[r4,#8]
000058  4288              CMP      r0,r1
00005a  d133              BNE      |L9.196|
;;;434    					{
;;;435    						/* 键值放入按键FIFO */
;;;436    						bsp_PutKey((uint8_t)(3 * i + 3));
00005c  eb050145          ADD      r1,r5,r5,LSL #1
000060  1cc9              ADDS     r1,r1,#3
000062  b2c8              UXTB     r0,r1
000064  f7fffffe          BL       bsp_PutKey
000068  e02c              B        |L9.196|
                  |L9.106|
;;;437    					}
;;;438    				}
;;;439    				else
;;;440    				{
;;;441    					if (pBtn->RepeatSpeed > 0)
00006a  7ae0              LDRB     r0,[r4,#0xb]
00006c  2800              CMP      r0,#0
00006e  dd29              BLE      |L9.196|
;;;442    					{
;;;443    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
000070  7b20              LDRB     r0,[r4,#0xc]
000072  1c40              ADDS     r0,r0,#1
000074  b2c0              UXTB     r0,r0
000076  7320              STRB     r0,[r4,#0xc]
000078  7ae1              LDRB     r1,[r4,#0xb]
00007a  4288              CMP      r0,r1
00007c  db22              BLT      |L9.196|
;;;444    						{
;;;445    							pBtn->RepeatCount = 0;
00007e  2000              MOVS     r0,#0
000080  7320              STRB     r0,[r4,#0xc]
;;;446    							/* 常按键后，每隔10ms发送1个按键 */
;;;447    							bsp_PutKey((uint8_t)(3 * i + 1));
000082  eb050145          ADD      r1,r5,r5,LSL #1
000086  1c49              ADDS     r1,r1,#1
000088  b2c8              UXTB     r0,r1
00008a  f7fffffe          BL       bsp_PutKey
00008e  e019              B        |L9.196|
                  |L9.144|
;;;448    						}
;;;449    					}
;;;450    				}
;;;451    			}
;;;452    		}
;;;453    	}
;;;454    	else
;;;455    	{
;;;456    		if(pBtn->Count > KEY_FILTER_TIME)
000090  7920              LDRB     r0,[r4,#4]
000092  2805              CMP      r0,#5
000094  dd02              BLE      |L9.156|
;;;457    		{
;;;458    			pBtn->Count = KEY_FILTER_TIME;
000096  2005              MOVS     r0,#5
000098  7120              STRB     r0,[r4,#4]
00009a  e010              B        |L9.190|
                  |L9.156|
;;;459    		}
;;;460    		else if(pBtn->Count != 0)
00009c  7920              LDRB     r0,[r4,#4]
00009e  b118              CBZ      r0,|L9.168|
;;;461    		{
;;;462    			pBtn->Count--;
0000a0  7920              LDRB     r0,[r4,#4]
0000a2  1e40              SUBS     r0,r0,#1
0000a4  7120              STRB     r0,[r4,#4]
0000a6  e00a              B        |L9.190|
                  |L9.168|
;;;463    		}
;;;464    		else
;;;465    		{
;;;466    			if (pBtn->State == 1)
0000a8  7aa0              LDRB     r0,[r4,#0xa]
0000aa  2801              CMP      r0,#1
0000ac  d107              BNE      |L9.190|
;;;467    			{
;;;468    				pBtn->State = 0;
0000ae  2000              MOVS     r0,#0
0000b0  72a0              STRB     r0,[r4,#0xa]
;;;469    
;;;470    				/* 发送按钮弹起的消息 */
;;;471    				bsp_PutKey((uint8_t)(3 * i + 2));
0000b2  eb050145          ADD      r1,r5,r5,LSL #1
0000b6  1c89              ADDS     r1,r1,#2
0000b8  b2c8              UXTB     r0,r1
0000ba  f7fffffe          BL       bsp_PutKey
                  |L9.190|
;;;472    			}
;;;473    		}
;;;474    
;;;475    		pBtn->LongCount = 0;
0000be  2000              MOVS     r0,#0
0000c0  80e0              STRH     r0,[r4,#6]
;;;476    		pBtn->RepeatCount = 0;
0000c2  7320              STRB     r0,[r4,#0xc]
                  |L9.196|
;;;477    	}
;;;478    }
0000c4  bd70              POP      {r4-r6,pc}
;;;479    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L9.200|
                          DCD      s_tBtn

                          AREA ||i.bsp_GetKey||, CODE, READONLY, ALIGN=2

                  bsp_GetKey PROC
;;;189    */
;;;190    uint8_t bsp_GetKey(void)
000000  480b              LDR      r0,|L10.48|
;;;191    {
;;;192    	uint8_t ret;
;;;193    
;;;194    	if (s_tKey.Read == s_tKey.Write)
000002  7a80              LDRB     r0,[r0,#0xa]  ; s_tKey
000004  4a0a              LDR      r2,|L10.48|
000006  7ad2              LDRB     r2,[r2,#0xb]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L10.16|
;;;195    	{
;;;196    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L10.14|
;;;197    	}
;;;198    	else
;;;199    	{
;;;200    		ret = s_tKey.Buf[s_tKey.Read];
;;;201    
;;;202    		if (++s_tKey.Read >= KEY_FIFO_SIZE)
;;;203    		{
;;;204    			s_tKey.Read = 0;
;;;205    		}
;;;206    		return ret;
;;;207    	}
;;;208    }
00000e  4770              BX       lr
                  |L10.16|
000010  4807              LDR      r0,|L10.48|
000012  7a80              LDRB     r0,[r0,#0xa]          ;200  ; s_tKey
000014  4a06              LDR      r2,|L10.48|
000016  5c11              LDRB     r1,[r2,r0]            ;200
000018  4610              MOV      r0,r2                 ;202
00001a  7a80              LDRB     r0,[r0,#0xa]          ;202  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;202
00001e  b2c0              UXTB     r0,r0                 ;202
000020  7290              STRB     r0,[r2,#0xa]          ;202
000022  280a              CMP      r0,#0xa               ;202
000024  db01              BLT      |L10.42|
000026  2000              MOVS     r0,#0                 ;204
000028  7290              STRB     r0,[r2,#0xa]          ;204
                  |L10.42|
00002a  4608              MOV      r0,r1                 ;206
00002c  e7ef              B        |L10.14|
;;;209    
                          ENDP

00002e  0000              DCW      0x0000
                  |L10.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKey2||, CODE, READONLY, ALIGN=2

                  bsp_GetKey2 PROC
;;;217    */
;;;218    uint8_t bsp_GetKey2(void)
000000  480b              LDR      r0,|L11.48|
;;;219    {
;;;220    	uint8_t ret;
;;;221    
;;;222    	if (s_tKey.Read2 == s_tKey.Write)
000002  7b00              LDRB     r0,[r0,#0xc]  ; s_tKey
000004  4a0a              LDR      r2,|L11.48|
000006  7ad2              LDRB     r2,[r2,#0xb]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L11.16|
;;;223    	{
;;;224    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L11.14|
;;;225    	}
;;;226    	else
;;;227    	{
;;;228    		ret = s_tKey.Buf[s_tKey.Read2];
;;;229    
;;;230    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
;;;231    		{
;;;232    			s_tKey.Read2 = 0;
;;;233    		}
;;;234    		return ret;
;;;235    	}
;;;236    }
00000e  4770              BX       lr
                  |L11.16|
000010  4807              LDR      r0,|L11.48|
000012  7b00              LDRB     r0,[r0,#0xc]          ;228  ; s_tKey
000014  4a06              LDR      r2,|L11.48|
000016  5c11              LDRB     r1,[r2,r0]            ;228
000018  4610              MOV      r0,r2                 ;230
00001a  7b00              LDRB     r0,[r0,#0xc]          ;230  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;230
00001e  b2c0              UXTB     r0,r0                 ;230
000020  7310              STRB     r0,[r2,#0xc]          ;230
000022  280a              CMP      r0,#0xa               ;230
000024  db01              BLT      |L11.42|
000026  2000              MOVS     r0,#0                 ;232
000028  7310              STRB     r0,[r2,#0xc]          ;232
                  |L11.42|
00002a  4608              MOV      r0,r1                 ;234
00002c  e7ef              B        |L11.14|
;;;237    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKeyState||, CODE, READONLY, ALIGN=2

                  bsp_GetKeyState PROC
;;;245    */
;;;246    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID)
000000  4601              MOV      r1,r0
;;;247    {
;;;248    	return s_tBtn[_ucKeyID].State;
000002  4802              LDR      r0,|L12.12|
000004  eb001001          ADD      r0,r0,r1,LSL #4
000008  7a80              LDRB     r0,[r0,#0xa]
;;;249    }
00000a  4770              BX       lr
;;;250    
                          ENDP

                  |L12.12|
                          DCD      s_tBtn

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=1

                  bsp_InitKey PROC
;;;157    */
;;;158    void bsp_InitKey(void)
000000  b510              PUSH     {r4,lr}
;;;159    {
;;;160    	bsp_InitKeyVar();		/* 初始化按键变量 */
000002  f7fffffe          BL       bsp_InitKeyVar
;;;161    	bsp_InitKeyHard();		/* 初始化按键硬件 */
000006  f7fffffe          BL       bsp_InitKeyHard
;;;162    }
00000a  bd10              POP      {r4,pc}
;;;163    
                          ENDP


                          AREA ||i.bsp_InitKeyHard||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyHard PROC
;;;289    */
;;;290    static void bsp_InitKeyHard(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;291    {
;;;292    	GPIO_InitTypeDef GPIO_InitStructure;
;;;293    
;;;294    	/* 第1步：打开GPIO时钟 */
;;;295    	RCC_AHB1PeriphClockCmd(RCC_ALL_KEY, ENABLE);
000002  2101              MOVS     r1,#1
000004  f44f70f2          MOV      r0,#0x1e4
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;296    
;;;297    	/* 第2步：配置所有的按键GPIO为浮动输入模式(实际上CPU复位后就是输入状态) */
;;;298    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;		/* 设为输入口 */
00000c  2000              MOVS     r0,#0
00000e  f88d0004          STRB     r0,[sp,#4]
;;;299    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000012  f88d0006          STRB     r0,[sp,#6]
;;;300    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 无需上下拉电阻 */
000016  f88d0007          STRB     r0,[sp,#7]
;;;301    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	/* IO口最大速度 */
00001a  2002              MOVS     r0,#2
00001c  f88d0005          STRB     r0,[sp,#5]
;;;302    
;;;303    	//GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K1;
;;;304    	//GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
;;;305    
;;;306    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K2;
000020  0300              LSLS     r0,r0,#12
000022  9000              STR      r0,[sp,#0]
;;;307    	GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4815              LDR      r0,|L14.124|
000028  f7fffffe          BL       GPIO_Init
;;;308    
;;;309    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K3;
00002c  f44f6000          MOV      r0,#0x800
000030  9000              STR      r0,[sp,#0]
;;;310    	GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  4812              LDR      r0,|L14.128|
000036  f7fffffe          BL       GPIO_Init
;;;311    
;;;312    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K4;
00003a  2004              MOVS     r0,#4
00003c  9000              STR      r0,[sp,#0]
;;;313    	GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
00003e  4669              MOV      r1,sp
000040  4810              LDR      r0,|L14.132|
000042  f7fffffe          BL       GPIO_Init
;;;314    
;;;315    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K5;
000046  2008              MOVS     r0,#8
000048  9000              STR      r0,[sp,#0]
;;;316    	GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
00004a  4669              MOV      r1,sp
00004c  480d              LDR      r0,|L14.132|
00004e  f7fffffe          BL       GPIO_Init
;;;317    
;;;318    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K6;
000052  f44f6000          MOV      r0,#0x800
000056  9000              STR      r0,[sp,#0]
;;;319    	GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
000058  4669              MOV      r1,sp
00005a  480b              LDR      r0,|L14.136|
00005c  f7fffffe          BL       GPIO_Init
;;;320    
;;;321    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K7;
000060  2080              MOVS     r0,#0x80
000062  9000              STR      r0,[sp,#0]
;;;322    	GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
000064  4669              MOV      r1,sp
000066  4809              LDR      r0,|L14.140|
000068  f7fffffe          BL       GPIO_Init
;;;323    
;;;324    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K8;
00006c  f44f4000          MOV      r0,#0x8000
000070  9000              STR      r0,[sp,#0]
;;;325    	GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
000072  4669              MOV      r1,sp
000074  4803              LDR      r0,|L14.132|
000076  f7fffffe          BL       GPIO_Init
;;;326    }
00007a  bd1c              POP      {r2-r4,pc}
;;;327    
                          ENDP

                  |L14.124|
                          DCD      0x40020800
                  |L14.128|
                          DCD      0x40022000
                  |L14.132|
                          DCD      0x40021c00
                  |L14.136|
                          DCD      0x40021400
                  |L14.140|
                          DCD      0x40021800

                          AREA ||i.bsp_InitKeyVar||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyVar PROC
;;;335    */
;;;336    static void bsp_InitKeyVar(void)
000000  2100              MOVS     r1,#0
;;;337    {
;;;338    	uint8_t i;
;;;339    
;;;340    	/* 对按键FIFO读写指针清零 */
;;;341    	s_tKey.Read = 0;
000002  4a24              LDR      r2,|L15.148|
000004  7291              STRB     r1,[r2,#0xa]
;;;342    	s_tKey.Write = 0;
000006  72d1              STRB     r1,[r2,#0xb]
;;;343    	s_tKey.Read2 = 0;
000008  7311              STRB     r1,[r2,#0xc]
;;;344    
;;;345    	/* 给每个按键结构体成员变量赋一组缺省值 */
;;;346    	for (i = 0; i < KEY_COUNT; i++)
00000a  2000              MOVS     r0,#0
00000c  e018              B        |L15.64|
                  |L15.14|
;;;347    	{
;;;348    		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* 长按时间 0 表示不检测长按键事件 */
00000e  2164              MOVS     r1,#0x64
000010  4a21              LDR      r2,|L15.152|
000012  eb021200          ADD      r2,r2,r0,LSL #4
000016  8111              STRH     r1,[r2,#8]
;;;349    		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* 计数器设置为滤波时间的一半 */
000018  2102              MOVS     r1,#2
00001a  4a1f              LDR      r2,|L15.152|
00001c  eb021200          ADD      r2,r2,r0,LSL #4
000020  7111              STRB     r1,[r2,#4]
;;;350    		s_tBtn[i].State = 0;							/* 按键缺省状态，0为未按下 */
000022  2100              MOVS     r1,#0
000024  4a1c              LDR      r2,|L15.152|
000026  eb021200          ADD      r2,r2,r0,LSL #4
00002a  7291              STRB     r1,[r2,#0xa]
;;;351    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 按键按下的键值代码 */
;;;352    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* 按键弹起的键值代码 */
;;;353    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 按键被持续按下的键值代码 */
;;;354    		s_tBtn[i].RepeatSpeed = 0;						/* 按键连发的速度，0表示不支持连发 */
00002c  4a1a              LDR      r2,|L15.152|
00002e  eb021200          ADD      r2,r2,r0,LSL #4
000032  72d1              STRB     r1,[r2,#0xb]
;;;355    		s_tBtn[i].RepeatCount = 0;						/* 连发计数器 */
000034  4a18              LDR      r2,|L15.152|
000036  eb021200          ADD      r2,r2,r0,LSL #4
00003a  7311              STRB     r1,[r2,#0xc]
00003c  1c41              ADDS     r1,r0,#1              ;346
00003e  b2c8              UXTB     r0,r1                 ;346
                  |L15.64|
000040  280a              CMP      r0,#0xa               ;346
000042  dbe4              BLT      |L15.14|
;;;356    	}
;;;357    
;;;358    	/* 如果需要单独更改某个按键的参数，可以在此单独重新赋值 */
;;;359    	/* 比如，我们希望按键1按下超过1秒后，自动重发相同键值 */
;;;360    	s_tBtn[KID_JOY_U].LongTime = 100;
000044  2264              MOVS     r2,#0x64
000046  4914              LDR      r1,|L15.152|
000048  870a              STRH     r2,[r1,#0x38]
;;;361    	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
00004a  2205              MOVS     r2,#5
00004c  f881203b          STRB     r2,[r1,#0x3b]
;;;362    
;;;363    	s_tBtn[KID_JOY_D].LongTime = 100;
000050  2264              MOVS     r2,#0x64
000052  f8a12048          STRH     r2,[r1,#0x48]
;;;364    	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
000056  2205              MOVS     r2,#5
000058  f881204b          STRB     r2,[r1,#0x4b]
;;;365    
;;;366    	s_tBtn[KID_JOY_L].LongTime = 100;
00005c  2264              MOVS     r2,#0x64
00005e  f8a12058          STRH     r2,[r1,#0x58]
;;;367    	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
000062  2205              MOVS     r2,#5
000064  f881205b          STRB     r2,[r1,#0x5b]
;;;368    
;;;369    	s_tBtn[KID_JOY_R].LongTime = 100;
000068  2264              MOVS     r2,#0x64
00006a  f8a12068          STRH     r2,[r1,#0x68]
;;;370    	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
00006e  2205              MOVS     r2,#5
000070  f881206b          STRB     r2,[r1,#0x6b]
;;;371    
;;;372    	/* 判断按键按下的函数 */
;;;373    //	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
;;;374    	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
000074  4909              LDR      r1,|L15.156|
000076  4a08              LDR      r2,|L15.152|
000078  6111              STR      r1,[r2,#0x10]  ; s_tBtn
;;;375    	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
00007a  4909              LDR      r1,|L15.160|
00007c  6211              STR      r1,[r2,#0x20]  ; s_tBtn
;;;376    	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
00007e  4909              LDR      r1,|L15.164|
000080  6311              STR      r1,[r2,#0x30]  ; s_tBtn
;;;377    	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
000082  4909              LDR      r1,|L15.168|
000084  6411              STR      r1,[r2,#0x40]  ; s_tBtn
;;;378    	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
000086  4909              LDR      r1,|L15.172|
000088  6511              STR      r1,[r2,#0x50]  ; s_tBtn
;;;379    	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
00008a  4909              LDR      r1,|L15.176|
00008c  6611              STR      r1,[r2,#0x60]  ; s_tBtn
;;;380    	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
00008e  4909              LDR      r1,|L15.180|
000090  6711              STR      r1,[r2,#0x70]  ; s_tBtn
;;;381    
;;;382    	/* 组合键 */
;;;383    //	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
;;;384    //	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
;;;385    }
000092  4770              BX       lr
;;;386    
                          ENDP

                  |L15.148|
                          DCD      s_tKey
                  |L15.152|
                          DCD      s_tBtn
                  |L15.156|
                          DCD      IsKeyDown2
                  |L15.160|
                          DCD      IsKeyDown3
                  |L15.164|
                          DCD      IsKeyDown4
                  |L15.168|
                          DCD      IsKeyDown5
                  |L15.172|
                          DCD      IsKeyDown6
                  |L15.176|
                          DCD      IsKeyDown7
                  |L15.180|
                          DCD      IsKeyDown8

                          AREA ||i.bsp_KeyScan||, CODE, READONLY, ALIGN=1

                  bsp_KeyScan PROC
;;;487    */
;;;488    void bsp_KeyScan(void)
000000  b510              PUSH     {r4,lr}
;;;489    {
;;;490    	uint8_t i;
;;;491    
;;;492    	for (i = 0; i < KEY_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e004              B        |L16.16|
                  |L16.6|
;;;493    	{
;;;494    		bsp_DetectKey(i);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_DetectKey
00000c  1c60              ADDS     r0,r4,#1              ;492
00000e  b2c4              UXTB     r4,r0                 ;492
                  |L16.16|
000010  2c0a              CMP      r4,#0xa               ;492
000012  dbf8              BLT      |L16.6|
;;;495    	}
;;;496    }
000014  bd10              POP      {r4,pc}
;;;497    
                          ENDP


                          AREA ||i.bsp_PutKey||, CODE, READONLY, ALIGN=2

                  bsp_PutKey PROC
;;;171    */
;;;172    void bsp_PutKey(uint8_t _KeyCode)
000000  4906              LDR      r1,|L17.28|
;;;173    {
;;;174    	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000002  7ac9              LDRB     r1,[r1,#0xb]  ; s_tKey
000004  4a05              LDR      r2,|L17.28|
000006  5450              STRB     r0,[r2,r1]
;;;175    
;;;176    	if (++s_tKey.Write  >= KEY_FIFO_SIZE)
000008  4611              MOV      r1,r2
00000a  7ac9              LDRB     r1,[r1,#0xb]  ; s_tKey
00000c  1c49              ADDS     r1,r1,#1
00000e  b2c9              UXTB     r1,r1
000010  72d1              STRB     r1,[r2,#0xb]
000012  290a              CMP      r1,#0xa
000014  db01              BLT      |L17.26|
;;;177    	{
;;;178    		s_tKey.Write = 0;
000016  2100              MOVS     r1,#0
000018  72d1              STRB     r1,[r2,#0xb]
                  |L17.26|
;;;179    	}
;;;180    }
00001a  4770              BX       lr
;;;181    
                          ENDP

                  |L17.28|
                          DCD      s_tKey

                          AREA ||i.bsp_SetKeyParam||, CODE, READONLY, ALIGN=2

                  bsp_SetKeyParam PROC
;;;260    */
;;;261    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t  _RepeatSpeed)
000000  b510              PUSH     {r4,lr}
;;;262    {
;;;263    	s_tBtn[_ucKeyID].LongTime = _LongTime;			/* 长按时间 0 表示不检测长按键事件 */
000002  4b07              LDR      r3,|L18.32|
000004  eb031300          ADD      r3,r3,r0,LSL #4
000008  8119              STRH     r1,[r3,#8]
;;;264    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed;			/* 按键连发的速度，0表示不支持连发 */
00000a  4b05              LDR      r3,|L18.32|
00000c  eb031300          ADD      r3,r3,r0,LSL #4
000010  72da              STRB     r2,[r3,#0xb]
;;;265    	s_tBtn[_ucKeyID].RepeatCount = 0;						/* 连发计数器 */
000012  2300              MOVS     r3,#0
000014  4c02              LDR      r4,|L18.32|
000016  eb041400          ADD      r4,r4,r0,LSL #4
00001a  7323              STRB     r3,[r4,#0xc]
;;;266    }
00001c  bd10              POP      {r4,pc}
;;;267    
                          ENDP

00001e  0000              DCW      0x0000
                  |L18.32|
                          DCD      s_tBtn

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tBtn
                          %        160
                  s_tKey
                          %        13

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_key.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_key_c_dc6aca1d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REVSH|
#line 144
|__asm___9_bsp_key_c_dc6aca1d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
